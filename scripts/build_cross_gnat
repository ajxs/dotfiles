#!/usr/bin/env bash

source "${HOME}/dotfiles/_shared.sh" || exit 1

# Recipe for installing a GNAT capable GCC cross-compiler.

export BUILD_TARGET="i686-elf"
export BUILD_PREFIX="${HOME}/opt/cross"
export PATH="${BUILD_PREFIX}/bin:${PATH}"
export HOST="x86_64-pc-linux-gnu"

build_dir="${HOME}/src/build"
source_dir="${HOME}/src"

export BINUTILS_VERSION="2.32"
export GCC_VERSION="6.3.0"
export NEWLIB_VERSION="3.1.0"


function build_binutils {
	binutils_dir="binutils-${BINUTILS_VERSION}"

	echo "Building cross binutils for arch: '${BUILD_TARGET}'"
	echo "Target: ${BUILD_TARGET}"
	echo "Prefix: ${BUILD_PREFIX}"
	echo "Source dir: ${source_dir}/${binutils_dir}"
	prompt_to_confirm

	if [[ ! -d "${binutils_dir}" ]]; then
		mkdir "${binutils_dir}" || exit 1
	fi

	cd "${binutils_dir}" || exit 1

	../../${binutils_dir}/configure \
		--target=${BUILD_TARGET} \
		--prefix="${BUILD_PREFIX}" \
		--host="${HOST}" \
		--with-gcc \
		--with-sysroot \
		--disable-nls \
		--enable-multilib \
		--enable-interwork \
		--disable-shared \
		--disable-threads \
		--disable-werror

	make -j8 || die_with_message "Error building binutils"
	make -j8  install || die_with_message "Error installing binutils"

	cd "${build_dir}"
}


function build_initial_gcc {
	gcc_dir="gcc-${GCC_VERSION}"

	echo "Building cross GCC bootstrap for arch: '${BUILD_TARGET}'"
	echo "Target: ${BUILD_TARGET}"
	echo "Prefix: ${BUILD_PREFIX}"
	echo "Source dir: ${source_dir}/${gcc_dir}"
	prompt_to_confirm

	if [[ ! -d "${gcc_dir}" ]]; then
		mkdir "${gcc_dir}" || exit 1
	fi

	cd "${gcc_dir}" || exit 1

	${source_dir}/${gcc_dir}/configure \
		--target=${BUILD_TARGET} \
		--prefix="${BUILD_PREFIX}" \
		--host="${HOST}" \
		--enable-languages="c" \
		--with-newlib \
		--without-headers \
		--enable-multilib \
		--disable-shared \
		--disable-nls

	make -j8 all-gcc || die_with_message "Error building initial GCC"
	make -j8 install-gcc || die_with_message "Error installing initial GCC"

	cd "${build_dir}"
}


function build_newlib {
	newlib_dir="newlib-${NEWLIB_VERSION}"

	echo "Building cross newlib for arch: '${BUILD_TARGET}'"
	echo "Target: ${BUILD_TARGET}"
	echo "Prefix: ${BUILD_PREFIX}"
	echo "Source dir: ${source_dir}/${newlib_dir}"
	prompt_to_confirm

	if [[ ! -d "${newlib_dir}" ]]; then
		mkdir "${newlib_dir}" || exit 1
	fi

	cd "${newlib_dir}" || exit 1

	${source_dir}/${newlib_dir}/configure \
		--target=${BUILD_TARGET} \
		--prefix="${BUILD_PREFIX}" \
		--disable-multilib \
		--disable-nls

	make -j8 all || die_with_message "Error building newlib"
	make -j8 install || die_with_message "Error installing newlib"

	cd "${build_dir}"
}


function build_gcc {
	gcc_dir="gcc-${GCC_VERSION}"

	echo "Building GCC for arch: '${BUILD_TARGET}'"
	echo "Target: ${BUILD_TARGET}"
	echo "Prefix: ${BUILD_PREFIX}"
	echo "Source dir: ${source_dir}/${gcc_dir}"
	prompt_to_confirm

	if [[ ! -d "${gcc_dir}" ]]; then
		mkdir "${gcc_dir}" || exit 1
	fi

	cd "${gcc_dir}" || exit 1

	${source_dir}/${gcc_dir}/configure \
		--target=${BUILD_TARGET} \
		--prefix="${BUILD_PREFIX}" \
		--host="${HOST}" \
		--enable-languages="c,c++,ada" \
		--with-newlib \
		--disable-libada \
		--without-headers \
		--disable-threads \
		--enable-multilib \
		--enable-interwork \
		--disable-shared \
		--with-system-zlib \
		--without-libiconv-prefix \
		--disable-libmudflap \
		--disable-libstdcxx-pch \
		--enable-lto \
		--disable-nls

	make -j8 all-gcc || die_with_message "Error building GCC"
	make -j6 all-target-libgcc || die_with_message "Error building GCC"
	make -j8 -C gcc cross-gnattools ada.all.cross || die_with_message "Error building GCC"

	make -j8 install-strip-gcc install-target-libgcc || die_with_message "Error installing GCC"

	cd "${build_dir}"
}


# build_binutils
# build_initial_gcc
build_newlib
# build_gcc
